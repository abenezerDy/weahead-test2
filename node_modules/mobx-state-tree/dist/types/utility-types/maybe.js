import { union, optional, isType, fail, undefinedType, nullType } from "../../internal";
var optionalUndefinedType = optional(undefinedType, undefined);
var optionalNullType = optional(nullType, null);
/**
 * `types.maybe` - Maybe will make a type nullable, and also optional.
 * The value `undefined` will be used to represent nullability.
 *
 * @param type
 * @returns
 */
export function maybe(type) {
    if (process.env.NODE_ENV !== "production" && !isType(type))
        throw fail("expected a mobx-state-tree type as first argument, got " + type + " instead");
    return union(type, optionalUndefinedType);
}
/**
 * `types.maybeNull` - Maybe will make a type nullable, and also optional.
 * The value `null` will be used to represent no value.
 *
 * @param type
 * @returns
 */
export function maybeNull(type) {
    if (process.env.NODE_ENV !== "production" && !isType(type))
        throw fail("expected a mobx-state-tree type as first argument, got " + type + " instead");
    return union(type, optionalNullType);
}
//# sourceMappingURL=maybe.js.map