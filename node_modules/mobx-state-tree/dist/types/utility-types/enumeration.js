import { union, literal, fail } from "../../internal";
/**
 * `types.enumeration` - Can be used to create an string based enumeration.
 * (note: this methods is just sugar for a union of string literals)
 *
 * Example:
 * ```ts
 * const TrafficLight = types.model({
 *   color: types.enumeration("Color", ["Red", "Orange", "Green"])
 * })
 * ```
 *
 * @param name descriptive name of the enumeration (optional)
 * @param options possible values this enumeration can have
 * @returns
 */
export function enumeration(name, options) {
    var realOptions = typeof name === "string" ? options : name;
    // check all options
    if (process.env.NODE_ENV !== "production") {
        realOptions.forEach(function (option) {
            if (typeof option !== "string")
                throw fail("expected all options to be string, got " + type + " instead");
        });
    }
    var type = union.apply(void 0, realOptions.map(function (option) { return literal("" + option); }));
    if (typeof name === "string")
        type.name = name;
    return type;
}
//# sourceMappingURL=enumeration.js.map