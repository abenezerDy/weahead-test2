import * as tslib_1 from "tslib";
import { fail, freeze, NodeLifeCycle, BaseNode } from "../../internal";
import { action } from "mobx";
/**
 * @internal
 * @hidden
 */
var ScalarNode = /** @class */ (function (_super) {
    tslib_1.__extends(ScalarNode, _super);
    function ScalarNode(simpleType, parent, subpath, environment, initialSnapshot) {
        var _this = _super.call(this, simpleType, parent, subpath, environment) || this;
        try {
            _this.storedValue = simpleType.createNewInstance(initialSnapshot);
        }
        catch (e) {
            // short-cut to die the instance, to avoid the snapshot computed starting to throw...
            _this.state = NodeLifeCycle.DEAD;
            throw e;
        }
        _this.state = NodeLifeCycle.CREATED;
        // for scalar nodes there's no point in firing this event since it would fire on the constructor, before
        // anybody can actually register for/listen to it
        // this.fireHook(Hook.AfterCreate)
        _this.finalizeCreation();
        return _this;
    }
    Object.defineProperty(ScalarNode.prototype, "root", {
        get: function () {
            // future optimization: store root ref in the node and maintain it
            if (!this.parent)
                throw fail("This scalar node is not part of a tree");
            return this.parent.root;
        },
        enumerable: true,
        configurable: true
    });
    ScalarNode.prototype.setParent = function (newParent, subpath) {
        if (subpath === void 0) { subpath = null; }
        if (this.parent === newParent && this.subpath === subpath)
            return;
        if (this.parent && !newParent) {
            this.die();
        }
        else {
            var newPath = subpath === null ? "" : subpath;
            if (newParent && newParent !== this.parent) {
                throw fail("assertion failed: scalar nodes cannot change their parent");
            }
            else if (this.subpath !== newPath) {
                this.baseSetParent(this.parent, newPath);
            }
        }
    };
    Object.defineProperty(ScalarNode.prototype, "snapshot", {
        get: function () {
            return freeze(this.getSnapshot());
        },
        enumerable: true,
        configurable: true
    });
    ScalarNode.prototype.getSnapshot = function () {
        return this.type.getSnapshot(this);
    };
    ScalarNode.prototype.toString = function () {
        return this.type.name + "@" + (this.path || "<root>") + (this.isAlive ? "" : "[dead]");
    };
    ScalarNode.prototype.die = function () {
        if (this.state === NodeLifeCycle.DETACHING)
            return;
        this.aboutToDie();
        this.finalizeDeath();
    };
    ScalarNode.prototype.finalizeCreation = function () {
        this.baseFinalizeCreation();
    };
    ScalarNode.prototype.aboutToDie = function () {
        this.baseAboutToDie();
    };
    ScalarNode.prototype.finalizeDeath = function () {
        this.baseFinalizeDeath();
    };
    ScalarNode.prototype.fireHook = function (name) {
        this.fireInternalHook(name);
    };
    tslib_1.__decorate([
        action
    ], ScalarNode.prototype, "die", null);
    return ScalarNode;
}(BaseNode));
export { ScalarNode };
//# sourceMappingURL=scalar-node.js.map