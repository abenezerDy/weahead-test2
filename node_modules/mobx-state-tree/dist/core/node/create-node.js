import { fail, ObjectNode, ScalarNode, getStateTreeNodeSafe } from "../../internal";
/**
 * @internal
 * @hidden
 */
export function createObjectNode(type, parent, subpath, environment, initialValue) {
    var existingNode = getStateTreeNodeSafe(initialValue);
    if (existingNode) {
        if (existingNode.isRoot) {
            existingNode.setParent(parent, subpath);
            return existingNode;
        }
        throw fail("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + (parent ? parent.path : "") + "/" + subpath + "', but it lives already at '" + existingNode.path + "'");
    }
    // not a node, a snapshot
    return new ObjectNode(type, parent, subpath, environment, initialValue);
}
/**
 * @internal
 * @hidden
 */
export function createScalarNode(type, parent, subpath, environment, initialValue) {
    return new ScalarNode(type, parent, subpath, environment, initialValue);
}
/**
 * @internal
 * @hidden
 */
export function isNode(value) {
    return value instanceof ScalarNode || value instanceof ObjectNode;
}
//# sourceMappingURL=create-node.js.map